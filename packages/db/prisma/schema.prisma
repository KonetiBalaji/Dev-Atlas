// DevAtlas Database Schema
// Created by Balaji Koneti

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// Enable pgvector extension for embeddings
generator vector {
  provider = "prisma-vector"
}

// Organization model - represents a tenant in multi-tenant architecture
model Org {
  id          String   @id @default(cuid())
  name        String
  stripeId    String?  @unique
  users       User[]
  projects    Project[]
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("orgs")
}

// User model - represents users within an organization
model User {
  id        String   @id @default(cuid())
  orgId     String
  org       Org      @relation(fields: [orgId], references: [id], onDelete: Cascade)
  email     String   @unique
  name      String?
  role      Role     @default(VIEWER)
  provider  String   @default("github")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("users")
}

// Role enum for user permissions
enum Role {
  OWNER
  ADMIN
  EDITOR
  VIEWER
}

// Project model - represents a GitHub identity to analyze (user/org)
model Project {
  id        String     @id @default(cuid())
  orgId     String
  org       Org        @relation(fields: [orgId], references: [id], onDelete: Cascade)
  handle    String     // GitHub username/org name
  type      String     // "user" | "org"
  status    String     @default("idle") // idle|analyzing|complete|error
  analyses  Analysis[]
  createdAt DateTime   @default(now())
  updatedAt DateTime   @updatedAt

  @@unique([orgId, handle])
  @@map("projects")
}

// Analysis model - represents a single analysis run
model Analysis {
  id           String   @id @default(cuid())
  projectId    String
  project      Project  @relation(fields: [projectId], references: [id], onDelete: Cascade)
  startedAt    DateTime @default(now())
  finishedAt   DateTime?
  status       String   @default("queued") // queued|running|failed|complete
  summary      String?
  scoreId      String?  @unique
  score        Score?   @relation(fields: [scoreId], references: [id])
  repos        Repo[]
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt

  @@map("analyses")
}

// Repository model - represents a single GitHub repository
model Repo {
  id           String      @id @default(cuid())
  analysisId   String
  analysis     Analysis    @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  name         String
  url          String
  stars        Int         @default(0)
  forks        Int         @default(0)
  language     String?
  loc          Int         @default(0)
  hasTests     Boolean     @default(false)
  hasCI        Boolean     @default(false)
  readmeScore  Int         @default(0)
  lintIssues   Int         @default(0)
  complexity   Float?
  vulnCount    Int         @default(0)
  secretsFound Int         @default(0)
  summary      String?
  ownership    Ownership[]
  embeddings   Embedding[]
  createdAt    DateTime    @default(now())
  updatedAt    DateTime    @updatedAt

  @@map("repos")
}

// Ownership model - represents code ownership by directory
model Ownership {
  id        String @id @default(cuid())
  repoId    String
  repo      Repo   @relation(fields: [repoId], references: [id], onDelete: Cascade)
  path      String
  author    String // normalized GitHub login/email
  share     Float  // 0.0..1.0 (percentage of ownership)
  createdAt DateTime @default(now())

  @@unique([repoId, path, author])
  @@map("ownership")
}

// Score model - represents analysis scoring results
model Score {
  id             String   @id @default(cuid())
  analysisId     String   @unique
  analysis       Analysis @relation(fields: [analysisId], references: [id], onDelete: Cascade)
  overall        Int      // 0-100 overall score
  craft          Int      // 0-100 code quality score
  reliability    Int      // 0-100 reliability score
  documentation  Int      // 0-100 documentation score
  security       Int      // 0-100 security score
  impact         Int      // 0-100 impact score
  collaboration  Int      // 0-100 collaboration score
  details        Json     // Detailed scoring breakdown
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt

  @@map("scores")
}

// Embedding model - represents vector embeddings for semantic search
model Embedding {
  id        String   @id @default(cuid())
  repoId    String
  repo      Repo     @relation(fields: [repoId], references: [id], onDelete: Cascade)
  path      String
  kind      String   // repo|dir|file|doc
  vector    Vector   // pgvector(1536) for OpenAI embeddings
  text      String
  createdAt DateTime @default(now())

  @@map("embeddings")
}

// Job model - represents background job tracking
model Job {
  id          String   @id @default(cuid())
  type        String   // analysis|clone|analyze|score
  status      String   @default("pending") // pending|running|completed|failed
  payload     Json     // Job-specific data
  result      Json?    // Job result data
  error       String?  // Error message if failed
  attempts    Int      @default(0)
  maxAttempts Int      @default(3)
  startedAt   DateTime?
  finishedAt  DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  @@map("jobs")
}

// AuditLog model - represents audit trail for compliance
model AuditLog {
  id        String   @id @default(cuid())
  orgId     String
  userId    String?
  action    String   // create|update|delete|analyze
  resource  String   // project|analysis|repo
  resourceId String
  details   Json?
  ipAddress String?
  userAgent String?
  createdAt DateTime @default(now())

  @@map("audit_logs")
}
